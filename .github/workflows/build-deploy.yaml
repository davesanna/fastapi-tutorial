name: Build and Deploy Code

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    environment:
      name: testing
    env:
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    steps:
      - name: pulling git repo
        uses: actions/checkout@v2
      - name: Install python 3.10.2
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.2
      - name: update pip
        run: python -m pip install --upgrade pip
      - name: install poetry
        run: pip install poetry
      - name: install dependancies
        run: poetry install
      - name: test with pytest
        run: poetry run pytest -v -x

      # push to Docker Hub (optimized workflow)
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./ # point to current directory (project root folder)
          file: ./Dockerfile # name of docker file
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi-tutorial:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/fastapi-tutorial:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/fastapi-tutorial:buildcache,mode=max

  deploy:
  runs-on: ubuntu-latest
    needs: [build]
    environment:
      name: production
    steps:
      - name: Pull repo
        uses: actions/checkout@v2
      - name: Deploy to heroku
        uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.HEROKU_APP_NAME}} #Must be unique in Heroku
          heroku_email: ${{secrets.HEROKU_EMAIL}}

    
      - name: deploy to Ubuntu Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.UBUNTU_HOST }}
          username: ${{ secrets.UBUNTU_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd app/src
            git pull 
            echo password | sudo systemctl restart api
